"use strict";
// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoguard = exports.Undefined = exports.String = exports.Null = exports.Number = exports.Boolean = void 0;
exports.Boolean = {
    as(subject, path = "") {
        return ((subject, path) => {
            if ((subject != null) && (subject.constructor === globalThis.Boolean)) {
                return subject;
            }
            throw "Type guard \"Boolean\" failed at \"" + path + "\"!";
        })(subject, path);
    },
    is(subject) {
        try {
            exports.Boolean.as(subject);
        }
        catch (error) {
            return false;
        }
        return true;
    }
};
exports.Number = {
    as(subject, path = "") {
        return ((subject, path) => {
            if ((subject != null) && (subject.constructor === globalThis.Number)) {
                return subject;
            }
            throw "Type guard \"Number\" failed at \"" + path + "\"!";
        })(subject, path);
    },
    is(subject) {
        try {
            exports.Number.as(subject);
        }
        catch (error) {
            return false;
        }
        return true;
    }
};
exports.Null = {
    as(subject, path = "") {
        return ((subject, path) => {
            if (subject === null) {
                return subject;
            }
            throw "Type guard \"Null\" failed at \"" + path + "\"!";
        })(subject, path);
    },
    is(subject) {
        try {
            exports.Null.as(subject);
        }
        catch (error) {
            return false;
        }
        return true;
    }
};
exports.String = {
    as(subject, path = "") {
        return ((subject, path) => {
            if ((subject != null) && (subject.constructor === globalThis.String)) {
                return subject;
            }
            throw "Type guard \"String\" failed at \"" + path + "\"!";
        })(subject, path);
    },
    is(subject) {
        try {
            exports.String.as(subject);
        }
        catch (error) {
            return false;
        }
        return true;
    }
};
exports.Undefined = {
    as(subject, path = "") {
        return ((subject, path) => {
            if (subject === undefined) {
                return subject;
            }
            throw "Type guard \"Undefined\" failed at \"" + path + "\"!";
        })(subject, path);
    },
    is(subject) {
        try {
            exports.Undefined.as(subject);
        }
        catch (error) {
            return false;
        }
        return true;
    }
};
exports.Autoguard = {
    "Boolean": exports.Boolean,
    "Number": exports.Number,
    "Null": exports.Null,
    "String": exports.String,
    "Undefined": exports.Undefined
};
