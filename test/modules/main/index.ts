// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import { ExternalType1 } from ".././module";
import { ExternalType2 } from "../../modules/module";
import { ExternalType3 } from ".././dummy/../module/.";

export const ExternalReference1 = autoguard.guards.Reference.of(() => ExternalType1);

export type ExternalReference1 = ReturnType<typeof ExternalReference1["as"]>;

export const ExternalReference2 = autoguard.guards.Reference.of(() => ExternalType2);

export type ExternalReference2 = ReturnType<typeof ExternalReference2["as"]>;

export const ExternalReference3 = autoguard.guards.Reference.of(() => ExternalType3);

export type ExternalReference3 = ReturnType<typeof ExternalReference3["as"]>;

export const ExternalReference4 = autoguard.guards.Object.of({
	"key": autoguard.guards.Reference.of(() => ExternalType1)
});

export type ExternalReference4 = ReturnType<typeof ExternalReference4["as"]>;

export const InternalReference1 = autoguard.guards.Reference.of(() => InternalType);

export type InternalReference1 = ReturnType<typeof InternalReference1["as"]>;

export const InternalReference2 = autoguard.guards.Object.of({
	"key": autoguard.guards.Reference.of(() => InternalType)
});

export type InternalReference2 = ReturnType<typeof InternalReference2["as"]>;

export const InternalType = autoguard.guards.String;

export type InternalType = ReturnType<typeof InternalType["as"]>;

export namespace Autoguard {
	export const Guards = {
		"ExternalReference1": autoguard.guards.Reference.of(() => ExternalReference1),
		"ExternalReference2": autoguard.guards.Reference.of(() => ExternalReference2),
		"ExternalReference3": autoguard.guards.Reference.of(() => ExternalReference3),
		"ExternalReference4": autoguard.guards.Reference.of(() => ExternalReference4),
		"InternalReference1": autoguard.guards.Reference.of(() => InternalReference1),
		"InternalReference2": autoguard.guards.Reference.of(() => InternalReference2),
		"InternalType": autoguard.guards.Reference.of(() => InternalType)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
