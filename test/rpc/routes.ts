// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../";

export namespace Autoguard {
	export type Guards = {};

	export const Guards = {};

	export type Routes = {
		"GET:/": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"POST:/": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/one": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/one/": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/one/two": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/<dynamic_boolean_component>": (request: {
			"options": {
				"dynamic_boolean_component": boolean
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/<dynamic_number_component>": (request: {
			"options": {
				"dynamic_number_component": number
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/<dynamic_string_component>": (request: {
			"options": {
				"dynamic_string_component": string
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/<dynamic_component_one>/<dynamic_component_two>": (request: {
			"options": {
				"dynamic_component_one": string,
				"dynamic_component_two": string
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters01": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters02": (request: {
			"options": {
				"required_boolean_parameter": boolean
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters03": (request: {
			"options"?: {
				"optional_boolean_parameter"?: boolean
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters04": (request: {
			"options": {
				"required_number_parameter": number
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters05": (request: {
			"options"?: {
				"optional_number_parameter"?: number
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters06": (request: {
			"options": {
				"required_string_parameter": string
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters07": (request: {
			"options"?: {
				"optional_string_parameter"?: string
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/parameters08": (request: {
			"options": {
				"parameter_one": string,
				"parameter_two": string
			},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers01": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers02": (request: {
			"options"?: {},
			"headers": {
				"required_boolean_request_header": boolean
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers03": (request: {
			"options"?: {},
			"headers"?: {
				"optional_boolean_request_header"?: boolean
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers04": (request: {
			"options"?: {},
			"headers": {
				"required_number_request_header": number
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers05": (request: {
			"options"?: {},
			"headers"?: {
				"optional_number_request_header"?: number
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers06": (request: {
			"options"?: {},
			"headers": {
				"required_string_request_header": string
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers07": (request: {
			"options"?: {},
			"headers"?: {
				"optional_string_request_header"?: string
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_headers08": (request: {
			"options"?: {},
			"headers": {
				"request_header_one": string,
				"request_header_two": string
			},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/response_headers01": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/response_headers02": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers": {
				"required_boolean_response_header": boolean
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers03": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {
				"optional_boolean_response_header"?: boolean
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers04": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers": {
				"required_number_response_header": number
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers05": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {
				"optional_number_response_header"?: number
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers06": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers": {
				"required_string_response_header": string
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers07": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {
				"optional_string_response_header"?: string
			},
			"payload"?: undefined
		}>;
		"GET:/response_headers08": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers": {
				"response_header_one": string,
				"response_header_two": string
			},
			"payload"?: undefined
		}>;
		"GET:/request_payload01": (request: {
			"options"?: {},
			"headers"?: {},
			"payload": {
				"required_request_member": string
			}
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/request_payload02": (request: {
			"options"?: {},
			"headers"?: {},
			"payload": {
				"optional_request_member"?: string
			}
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload"?: undefined
		}>;
		"GET:/response_payload01": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload": {
				"required_request_member": string
			}
		}>;
		"GET:/response_payload02": (request: {
			"options"?: {},
			"headers"?: {},
			"payload"?: undefined
		}) => Promise<{
			"status"?: number,
			"headers"?: {},
			"payload": {
				"optional_request_member"?: string
			}
		}>;
		"GET:/full_example": (request: {
			"options": {
				"parameter": string
			},
			"headers": {
				"request_header": string
			},
			"payload": {
				"in_request_payload": string
			}
		}) => Promise<{
			"status"?: number,
			"headers": {
				"response_header": string
			},
			"payload": {
				"in_response_payload": string
			}
		}>;
	};

	export const Client = (options?: Partial<{ urlPrefix: string }>): Routes => ({
		"GET:/": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"POST:/": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "POST";
			let components = new Array<string>();
			components.push("");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/one": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("one");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/one/": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("one");
			components.push("");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/one/two": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("one");
			components.push("two");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/<dynamic_boolean_component>": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"dynamic_boolean_component": autoguard.guards.Boolean
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push(String(request.options["dynamic_boolean_component"]));
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/<dynamic_number_component>": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"dynamic_number_component": autoguard.guards.Number
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push(String(request.options["dynamic_number_component"]));
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/<dynamic_string_component>": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"dynamic_string_component": autoguard.guards.String
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push(String(request.options["dynamic_string_component"]));
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/<dynamic_component_one>/<dynamic_component_two>": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"dynamic_component_one": autoguard.guards.String,
					"dynamic_component_two": autoguard.guards.String
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push(String(request.options["dynamic_component_one"]));
			components.push(String(request.options["dynamic_component_two"]));
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters01": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters01");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters02": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"required_boolean_parameter": autoguard.guards.Boolean
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters02");
			let parameters = new Array<[string, string]>();
			if (request.options?.["required_boolean_parameter"] !== undefined) {
				parameters.push(["required_boolean_parameter", String(request.options?.["required_boolean_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters03": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_boolean_parameter": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Boolean
						)
					})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters03");
			let parameters = new Array<[string, string]>();
			if (request.options?.["optional_boolean_parameter"] !== undefined) {
				parameters.push(["optional_boolean_parameter", String(request.options?.["optional_boolean_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters04": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"required_number_parameter": autoguard.guards.Number
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters04");
			let parameters = new Array<[string, string]>();
			if (request.options?.["required_number_parameter"] !== undefined) {
				parameters.push(["required_number_parameter", String(request.options?.["required_number_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters05": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_number_parameter": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						)
					})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters05");
			let parameters = new Array<[string, string]>();
			if (request.options?.["optional_number_parameter"] !== undefined) {
				parameters.push(["optional_number_parameter", String(request.options?.["optional_number_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters06": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"required_string_parameter": autoguard.guards.String
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters06");
			let parameters = new Array<[string, string]>();
			if (request.options?.["required_string_parameter"] !== undefined) {
				parameters.push(["required_string_parameter", String(request.options?.["required_string_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters07": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_string_parameter": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.String
						)
					})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters07");
			let parameters = new Array<[string, string]>();
			if (request.options?.["optional_string_parameter"] !== undefined) {
				parameters.push(["optional_string_parameter", String(request.options?.["optional_string_parameter"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/parameters08": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"parameter_one": autoguard.guards.String,
					"parameter_two": autoguard.guards.String
				}),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("parameters08");
			let parameters = new Array<[string, string]>();
			if (request.options?.["parameter_one"] !== undefined) {
				parameters.push(["parameter_one", String(request.options?.["parameter_one"])]);
			}
			if (request.options?.["parameter_two"] !== undefined) {
				parameters.push(["parameter_two", String(request.options?.["parameter_two"])]);
			}
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers01": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers01");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers02": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Object.of({
					"required_boolean_request_header": autoguard.guards.Boolean
				}),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers02");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["required_boolean_request_header"] !== undefined) {
				headers.push(["required_boolean_request_header", String(request.headers?.["required_boolean_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers03": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_boolean_request_header": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Boolean
						)
					})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers03");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["optional_boolean_request_header"] !== undefined) {
				headers.push(["optional_boolean_request_header", String(request.headers?.["optional_boolean_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers04": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Object.of({
					"required_number_request_header": autoguard.guards.Number
				}),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers04");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["required_number_request_header"] !== undefined) {
				headers.push(["required_number_request_header", String(request.headers?.["required_number_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers05": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_number_request_header": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						)
					})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers05");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["optional_number_request_header"] !== undefined) {
				headers.push(["optional_number_request_header", String(request.headers?.["optional_number_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers06": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Object.of({
					"required_string_request_header": autoguard.guards.String
				}),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers06");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["required_string_request_header"] !== undefined) {
				headers.push(["required_string_request_header", String(request.headers?.["required_string_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers07": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({
						"optional_string_request_header": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.String
						)
					})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers07");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["optional_string_request_header"] !== undefined) {
				headers.push(["optional_string_request_header", String(request.headers?.["optional_string_request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_headers08": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Object.of({
					"request_header_one": autoguard.guards.String,
					"request_header_two": autoguard.guards.String
				}),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_headers08");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			if (request.headers?.["request_header_one"] !== undefined) {
				headers.push(["request_header_one", String(request.headers?.["request_header_one"])]);
			}
			if (request.headers?.["request_header_two"] !== undefined) {
				headers.push(["request_header_two", String(request.headers?.["request_header_two"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers01": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers01");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers02": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers02");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"required_boolean_response_header": autoguard.api.getRequiredBoolean(response.headers, "required_boolean_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers03": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers03");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"optional_boolean_response_header": autoguard.api.getOptionalBoolean(response.headers, "optional_boolean_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers04": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers04");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"required_number_response_header": autoguard.api.getRequiredNumber(response.headers, "required_number_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers05": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers05");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"optional_number_response_header": autoguard.api.getOptionalNumber(response.headers, "optional_number_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers06": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers06");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"required_string_response_header": autoguard.api.getRequiredString(response.headers, "required_string_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers07": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers07");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"optional_string_response_header": autoguard.api.getOptionalString(response.headers, "optional_string_response_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_headers08": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_headers08");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"response_header_one": autoguard.api.getRequiredString(response.headers, "response_header_one"),
					"response_header_two": autoguard.api.getRequiredString(response.headers, "response_header_two"),
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_payload01": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Object.of({
					"required_request_member": autoguard.guards.String
				})
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_payload01");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/request_payload02": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Object.of({
					"optional_request_member": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.String
					)
				})
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("request_payload02");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_payload01": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_payload01");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Object.of({
					"required_request_member": autoguard.guards.String
				});
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/response_payload02": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"headers": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.Object.of({})
				),
				"payload": autoguard.guards.Union.of(
					autoguard.guards.Undefined
				)
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("response_payload02");
			let parameters = new Array<[string, string]>();
			let headers = new Array<[string, string]>();
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
				};
				let guard = autoguard.guards.Object.of({
					"optional_request_member": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.String
					)
				});
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
		"GET:/full_example": async (request) => {
			let guard = autoguard.guards.Object.of({
				"options": autoguard.guards.Object.of({
					"parameter": autoguard.guards.String
				}),
				"headers": autoguard.guards.Object.of({
					"request_header": autoguard.guards.String
				}),
				"payload": autoguard.guards.Object.of({
					"in_request_payload": autoguard.guards.String
				})
			});
			guard.as(request, "request");
			let method = "GET";
			let components = new Array<string>();
			components.push("full_example");
			let parameters = new Array<[string, string]>();
			if (request.options?.["parameter"] !== undefined) {
				parameters.push(["parameter", String(request.options?.["parameter"])]);
			}
			let headers = new Array<[string, string]>();
			if (request.headers?.["request_header"] !== undefined) {
				headers.push(["request_header", String(request.headers?.["request_header"])]);
			}
			let payload = JSON.stringify(request.payload) as string | undefined;
			let url = (options?.urlPrefix ?? "");
			url += autoguard.api.serializeComponents(components);
			url += autoguard.api.serializeParameters(parameters);
			let response = await autoguard.api.fetch(method, url, headers, payload);
			{
				let headers = {
					"response_header": autoguard.api.getRequiredString(response.headers, "response_header"),
				};
				let guard = autoguard.guards.Object.of({
					"in_response_payload": autoguard.guards.String
				});
				let json = response.payload !== undefined ? JSON.parse(response.payload) : undefined;
				let payload = guard.as(json);
				return { headers, payload };
			}
		},
	});

	export const Server = (routes: Routes, options?: Partial<{}>): autoguard.api.RequestListener => {
		let endpoints = new Array<autoguard.api.Endpoint>();
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "POST") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["POST:/"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/one"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			components.push(["", request.components[1]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/one/"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			components.push(["", request.components[1]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/one/two"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["dynamic_boolean_component", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"dynamic_boolean_component": autoguard.api.getRequiredBoolean(components, "dynamic_boolean_component"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/<dynamic_boolean_component>"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["dynamic_number_component", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"dynamic_number_component": autoguard.api.getRequiredNumber(components, "dynamic_number_component"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/<dynamic_number_component>"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["dynamic_string_component", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"dynamic_string_component": autoguard.api.getRequiredString(components, "dynamic_string_component"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/<dynamic_string_component>"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["dynamic_component_one", request.components[0]]);
			components.push(["dynamic_component_two", request.components[1]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"dynamic_component_one": autoguard.api.getRequiredString(components, "dynamic_component_one"),
					"dynamic_component_two": autoguard.api.getRequiredString(components, "dynamic_component_two"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/<dynamic_component_one>/<dynamic_component_two>"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters01"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"required_boolean_parameter": autoguard.api.getRequiredBoolean(request.parameters, "required_boolean_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters02"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"optional_boolean_parameter": autoguard.api.getOptionalBoolean(request.parameters, "optional_boolean_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters03"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"required_number_parameter": autoguard.api.getRequiredNumber(request.parameters, "required_number_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters04"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"optional_number_parameter": autoguard.api.getOptionalNumber(request.parameters, "optional_number_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters05"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"required_string_parameter": autoguard.api.getRequiredString(request.parameters, "required_string_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters06"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"optional_string_parameter": autoguard.api.getOptionalString(request.parameters, "optional_string_parameter"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters07"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"parameter_one": autoguard.api.getRequiredString(request.parameters, "parameter_one"),
					"parameter_two": autoguard.api.getRequiredString(request.parameters, "parameter_two"),
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/parameters08"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers01"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"required_boolean_request_header": autoguard.api.getRequiredBoolean(request.parameters, "required_boolean_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers02"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"optional_boolean_request_header": autoguard.api.getOptionalBoolean(request.parameters, "optional_boolean_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers03"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"required_number_request_header": autoguard.api.getRequiredNumber(request.parameters, "required_number_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers04"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"optional_number_request_header": autoguard.api.getOptionalNumber(request.parameters, "optional_number_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers05"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"required_string_request_header": autoguard.api.getRequiredString(request.parameters, "required_string_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers06"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"optional_string_request_header": autoguard.api.getOptionalString(request.parameters, "optional_string_request_header"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers07"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
					"request_header_one": autoguard.api.getRequiredString(request.parameters, "request_header_one"),
					"request_header_two": autoguard.api.getRequiredString(request.parameters, "request_header_two"),
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_headers08"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers01"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers02"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Object.of({
							"required_boolean_response_header": autoguard.guards.Boolean
						}),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers03"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({
								"optional_boolean_response_header": autoguard.guards.Union.of(
									autoguard.guards.Undefined,
									autoguard.guards.Boolean
								)
							})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers04"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Object.of({
							"required_number_response_header": autoguard.guards.Number
						}),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers05"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({
								"optional_number_response_header": autoguard.guards.Union.of(
									autoguard.guards.Undefined,
									autoguard.guards.Number
								)
							})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers06"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Object.of({
							"required_string_response_header": autoguard.guards.String
						}),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers07"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({
								"optional_string_response_header": autoguard.guards.Union.of(
									autoguard.guards.Undefined,
									autoguard.guards.String
								)
							})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_headers08"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Object.of({
							"response_header_one": autoguard.guards.String,
							"response_header_two": autoguard.guards.String
						}),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Object.of({
					"required_request_member": autoguard.guards.String
				});
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_payload01"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Object.of({
					"optional_request_member": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.String
					)
				});
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/request_payload02"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Union.of(
							autoguard.guards.Undefined
						)
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_payload01"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Object.of({
							"required_request_member": autoguard.guards.String
						})
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
				};
				let headers = {
				};
				let guard = autoguard.guards.Undefined;
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/response_payload02"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Object.of({})
						),
						"payload": autoguard.guards.Object.of({
							"optional_request_member": autoguard.guards.Union.of(
								autoguard.guards.Undefined,
								autoguard.guards.String
							)
						})
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		endpoints.push(async (request) => {
			let components = new Array<[string, string]>();
			components.push(["", request.components[0]]);
			if (!autoguard.api.checkComponents(request.components, components)) {
				return { status: 404, headers: [] };
			}
			if (request.method !== "GET") {
				return { status: 405, headers: [] };
			}
			try {
				let options = {
					"parameter": autoguard.api.getRequiredString(request.parameters, "parameter"),
				};
				let headers = {
					"request_header": autoguard.api.getRequiredString(request.parameters, "request_header"),
				};
				let guard = autoguard.guards.Object.of({
					"in_request_payload": autoguard.guards.String
				});
				let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
				let payload = guard.as(json);
				try {
					let response = await routes["GET:/full_example"]({ options, headers, payload });
					let guard = autoguard.guards.Object.of({
						"status": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.Number
						),
						"headers": autoguard.guards.Object.of({
							"response_header": autoguard.guards.String
						}),
						"payload": autoguard.guards.Object.of({
							"in_response_payload": autoguard.guards.String
						})
					});
					guard.as(response, "response");
					return autoguard.api.transformResponse(response);
				} catch (error) {
					return { status: 500, headers: [] };
				}
			} catch (error) {
				return { status: 400, headers: [] };
			}
		});
		return (request, response) => autoguard.api.route(endpoints, request, response);
	};
};
