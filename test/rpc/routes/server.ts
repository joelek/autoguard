// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import * as shared from "./shared";

export const Server = (routes: shared.Autoguard.Routes, options?: Partial<{}>): autoguard.api.RequestListener => {
	let endpoints = new Array<autoguard.api.Endpoint>();
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "POST") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["POST:/"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/one"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		components.push(["", request.components[1]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/one/"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		components.push(["", request.components[1]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/one/two"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["dynamic_boolean_component", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"dynamic_boolean_component": autoguard.api.getRequiredBoolean(components, "dynamic_boolean_component"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/<dynamic_boolean_component>"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["dynamic_number_component", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"dynamic_number_component": autoguard.api.getRequiredNumber(components, "dynamic_number_component"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/<dynamic_number_component>"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["dynamic_string_component", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"dynamic_string_component": autoguard.api.getRequiredString(components, "dynamic_string_component"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/<dynamic_string_component>"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["dynamic_component_one", request.components[0]]);
		components.push(["dynamic_component_two", request.components[1]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"dynamic_component_one": autoguard.api.getRequiredString(components, "dynamic_component_one"),
				"dynamic_component_two": autoguard.api.getRequiredString(components, "dynamic_component_two"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/<dynamic_component_one>/<dynamic_component_two>"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters01"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"required_boolean_parameter": autoguard.api.getRequiredBoolean(request.parameters, "required_boolean_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters02"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"optional_boolean_parameter": autoguard.api.getOptionalBoolean(request.parameters, "optional_boolean_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters03"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"required_number_parameter": autoguard.api.getRequiredNumber(request.parameters, "required_number_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters04"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"optional_number_parameter": autoguard.api.getOptionalNumber(request.parameters, "optional_number_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters05"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"required_string_parameter": autoguard.api.getRequiredString(request.parameters, "required_string_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters06"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"optional_string_parameter": autoguard.api.getOptionalString(request.parameters, "optional_string_parameter"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters07"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"parameter_one": autoguard.api.getRequiredString(request.parameters, "parameter_one"),
				"parameter_two": autoguard.api.getRequiredString(request.parameters, "parameter_two"),
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/parameters08"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers01"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"required_boolean_request_header": autoguard.api.getRequiredBoolean(request.parameters, "required_boolean_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers02"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"optional_boolean_request_header": autoguard.api.getOptionalBoolean(request.parameters, "optional_boolean_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers03"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"required_number_request_header": autoguard.api.getRequiredNumber(request.parameters, "required_number_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers04"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"optional_number_request_header": autoguard.api.getOptionalNumber(request.parameters, "optional_number_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers05"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"required_string_request_header": autoguard.api.getRequiredString(request.parameters, "required_string_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers06"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"optional_string_request_header": autoguard.api.getOptionalString(request.parameters, "optional_string_request_header"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers07"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
				"request_header_one": autoguard.api.getRequiredString(request.parameters, "request_header_one"),
				"request_header_two": autoguard.api.getRequiredString(request.parameters, "request_header_two"),
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_headers08"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers01"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers02"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Object.of({
						"required_boolean_response_header": autoguard.guards.Boolean
					}),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers03"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({
							"optional_boolean_response_header": autoguard.guards.Union.of(
								autoguard.guards.Undefined,
								autoguard.guards.Boolean
							)
						})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers04"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Object.of({
						"required_number_response_header": autoguard.guards.Number
					}),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers05"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({
							"optional_number_response_header": autoguard.guards.Union.of(
								autoguard.guards.Undefined,
								autoguard.guards.Number
							)
						})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers06"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Object.of({
						"required_string_response_header": autoguard.guards.String
					}),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers07"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({
							"optional_string_response_header": autoguard.guards.Union.of(
								autoguard.guards.Undefined,
								autoguard.guards.String
							)
						})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_headers08"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Object.of({
						"response_header_one": autoguard.guards.String,
						"response_header_two": autoguard.guards.String
					}),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Object.of({
				"required_request_member": autoguard.guards.String
			});
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_payload01"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Object.of({
				"optional_request_member": autoguard.guards.Union.of(
					autoguard.guards.Undefined,
					autoguard.guards.String
				)
			});
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/request_payload02"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Union.of(
						autoguard.guards.Undefined
					)
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_payload01"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Object.of({
						"required_request_member": autoguard.guards.String
					})
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
			};
			let headers = {
			};
			let guard = autoguard.guards.Undefined;
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/response_payload02"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Object.of({})
					),
					"payload": autoguard.guards.Object.of({
						"optional_request_member": autoguard.guards.Union.of(
							autoguard.guards.Undefined,
							autoguard.guards.String
						)
					})
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	endpoints.push(async (request) => {
		let components = new Array<[string, string]>();
		components.push(["", request.components[0]]);
		if (!autoguard.api.checkComponents(request.components, components)) {
			return { status: 404, headers: [] };
		}
		if (request.method !== "GET") {
			return { status: 405, headers: [] };
		}
		try {
			let options = {
				"parameter": autoguard.api.getRequiredString(request.parameters, "parameter"),
			};
			let headers = {
				"request_header": autoguard.api.getRequiredString(request.parameters, "request_header"),
			};
			let guard = autoguard.guards.Object.of({
				"in_request_payload": autoguard.guards.String
			});
			let json = request.payload !== undefined ? JSON.parse(request.payload) : undefined;
			let payload = guard.as(json);
			try {
				let response = await routes["GET:/full_example"]({ options, headers, payload });
				let guard = autoguard.guards.Object.of({
					"status": autoguard.guards.Union.of(
						autoguard.guards.Undefined,
						autoguard.guards.Number
					),
					"headers": autoguard.guards.Object.of({
						"response_header": autoguard.guards.String
					}),
					"payload": autoguard.guards.Object.of({
						"in_response_payload": autoguard.guards.String
					})
				});
				guard.as(response, "response");
				return autoguard.api.transformResponse(response);
			} catch (error) {
				return { status: 500, headers: [] };
			}
		} catch (error) {
			return { status: 400, headers: [] };
		}
	});
	return (request, response) => autoguard.api.route(endpoints, request, response);
};
