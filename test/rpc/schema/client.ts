// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../dist/lib-client";
import * as shared from "./index";

export type Client = autoguard.api.Client<shared.Autoguard.Requests, shared.Autoguard.Responses>;

export const makeClient = (clientOptions?: autoguard.api.ClientOptions): Client => ({
	"GET:/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"POST:/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["POST:/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["POST:/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/one": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/one"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/one"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/one/": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/one/"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/one/"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/one/two": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/one/two"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		components.push("two");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/one/two"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_component>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_component>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_component>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_plain_component>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_plain_component>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_plain_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_plain_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_plain_component>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_boolean_component>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_boolean_component>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_boolean_component"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_boolean_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_boolean_component>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_number_component>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_number_component>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_number_component"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_number_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_number_component>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_string_component>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_string_component>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_string_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_string_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_string_component>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<dynamic_component_one>/<dynamic_component_two>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<dynamic_component_one>/<dynamic_component_two>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_component_one"]], true));
		components.push(...autoguard.api.encodeComponents([request.options?.["dynamic_component_two"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["dynamic_component_one","dynamic_component_two"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<dynamic_component_one>/<dynamic_component_two>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/<quoted key>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/<quoted key>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.encodeComponents([request.options?.["quoted key"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["quoted key"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/<quoted key>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("%22r%C3%A4ksm%C3%B6rg%C3%A5s%22");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters01": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters01"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters01");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters01"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_boolean_parameter", [request.options?.["required_boolean_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters03": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters03"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters03");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_boolean_parameter", [request.options?.["optional_boolean_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters03"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters04": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters04"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters04");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_number_parameter", [request.options?.["required_number_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters04"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters05": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters05"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters05");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_number_parameter", [request.options?.["optional_number_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters05"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters06": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters06"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters06");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_string_parameter", [request.options?.["required_string_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters06"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters07": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters07"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters07");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_string_parameter", [request.options?.["optional_string_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters07"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters08": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters08"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters08");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("parameter_one", [request.options?.["parameter_one"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("parameter_two", [request.options?.["parameter_two"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters08"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters09": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters09"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters09");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("quoted key", [request.options?.["quoted key"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters09"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters10": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters10"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters10");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_parameter", [request.options?.["required_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters10"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters11": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters11"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters11");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_parameter", [request.options?.["optional_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters11"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters12": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters12"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters12");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_plain_parameter", [request.options?.["required_plain_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters12"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/parameters13": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/parameters13"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters13");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_plain_parameter", [request.options?.["optional_plain_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/parameters13"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_boolean_parameter", [request.options?.["required_boolean_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query03": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query03"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query03");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_boolean_parameter", [request.options?.["optional_boolean_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query03"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query04": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query04"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query04");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_number_parameter", [request.options?.["required_number_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query04"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query05": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query05"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query05");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_number_parameter", [request.options?.["optional_number_parameter"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query05"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query06": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query06"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query06");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_string_parameter", [request.options?.["required_string_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query06"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query07": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query07"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query07");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_string_parameter", [request.options?.["optional_string_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query07"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query08": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query08"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query08");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("parameter_one", [request.options?.["parameter_one"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("parameter_two", [request.options?.["parameter_two"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query08"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query09": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query09"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query09");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("quoted key", [request.options?.["quoted key"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query09"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query10": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query10"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query10");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_parameter", [request.options?.["required_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query10"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query11": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query11"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query11");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_parameter", [request.options?.["optional_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query11"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query12": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query12"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query12");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required_plain_parameter", [request.options?.["required_plain_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query12"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/query13": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/query13"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("query13");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("optional_plain_parameter", [request.options?.["optional_plain_parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/query13"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers01": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers01"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers01");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers01"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("required_boolean_request_header", [request.headers?.["required_boolean_request_header"]], false));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers03": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers03"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers03");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("optional_boolean_request_header", [request.headers?.["optional_boolean_request_header"]], false));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers03"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers04": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers04"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers04");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("required_number_request_header", [request.headers?.["required_number_request_header"]], false));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers04"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers05": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers05"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers05");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("optional_number_request_header", [request.headers?.["optional_number_request_header"]], false));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers05"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers06": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers06"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers06");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("required_string_request_header", [request.headers?.["required_string_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers06"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers07": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers07"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers07");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("optional_string_request_header", [request.headers?.["optional_string_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers07"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers08": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers08"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers08");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("request_header_one", [request.headers?.["request_header_one"]], true));
		headers.push(...autoguard.api.encodeHeaderPairs("request_header_two", [request.headers?.["request_header_two"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers08"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers09": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers09"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers09");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("quoted key", [request.headers?.["quoted key"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers09"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers10": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers10"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers10");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("required_request_header", [request.headers?.["required_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers10"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers11": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers11"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers11");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("optional_request_header", [request.headers?.["optional_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers11"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers12": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers12"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers12");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("required_plain_request_header", [request.headers?.["required_plain_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers12"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_headers13": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_headers13"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers13");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("optional_plain_request_header", [request.headers?.["optional_plain_request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_headers13"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers01": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers01"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers01");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers01"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["required_boolean_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_boolean_response_header", false);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers03": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers03"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers03");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["optional_boolean_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_boolean_response_header", false);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers03"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers04": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers04"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers04");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["required_number_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_number_response_header", false);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers04"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers05": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers05"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers05");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["optional_number_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_number_response_header", false);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers05"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers06": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers06"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers06");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["required_string_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_string_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers06"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers07": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers07"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers07");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["optional_string_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_string_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers07"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers08": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers08"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers08");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["response_header_one"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header_one", true);
			headers["response_header_two"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header_two", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers08"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers09": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers09"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers09");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["quoted key"] = autoguard.api.decodeHeaderValue(raw.headers, "quoted key", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers09"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers10": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers10"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers10");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["required_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers10"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers11": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers11"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers11");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["optional_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers11"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers12": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers12"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers12");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["required_plain_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_plain_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers12"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_headers13": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_headers13"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers13");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["optional_plain_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_plain_response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_headers13"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_payload01": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_payload01"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_payload01");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_payload01"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/request_payload02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/request_payload02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_payload02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/request_payload02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/response_payload01": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_payload01"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_payload01");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_payload01"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_payload02": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/response_payload02"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_payload02");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/response_payload02"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/full_example": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/full_example"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("full_example");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("parameter", [request.options?.["parameter"]], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeHeaderPairs("request_header", [request.headers?.["request_header"]], true));
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/json; charset=utf-8"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers["response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header", true);
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/full_example"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/reference": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/reference"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("reference");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/json; charset=utf-8"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/reference"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/binary_request": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/binary_request"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("binary_request");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/binary_request"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/binary_response": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/binary_response"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("binary_response");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/binary_response"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/number/<number>": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["GET:/number/<number>"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("number");
		components.push(...autoguard.api.encodeComponents([request.options?.["number"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("number", [request.options?.["number"]], false));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...["number"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["GET:/number/<number>"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"queryParameters": async (request, requestOptions) => {
		let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["queryParameters"], clientOptions?.debugMode);
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("");
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.encodeParameterPairs("required", [request.options?.["required"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("optional", [request.options?.["optional"]], true));
		parameters.push(...autoguard.api.encodeParameterPairs("repeated", request.options?.["repeated"] ?? [], true));
		parameters.push(...autoguard.api.encodeUndeclaredParameterPairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.encodeUndeclaredHeaderPairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload ?? [];
		let requestHandler = clientOptions?.requestHandler ?? autoguard.api.xhr;
		let defaultHeaders = clientOptions?.defaultHeaders?.slice() ?? [];
		defaultHeaders.push(["Content-Type", "application/octet-stream"]);
		defaultHeaders.push(["Accept", "application/octet-stream"]);
		let raw = await requestHandler(autoguard.api.finalizeRequest({ method, components, parameters, headers, payload }, defaultHeaders), clientOptions, requestOptions);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.JSON> = {};
			headers = { ...headers, ...autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)) };
			let payload = raw.payload;
			let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["queryParameters"], clientOptions?.debugMode);
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
});
