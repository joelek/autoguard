// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import * as shared from "./index";

export const makeClient = (options?: Partial<{
	urlPrefix: string,
	requestHandler: autoguard.api.RequestHandler
}>): autoguard.api.Client<shared.Autoguard.Requests, shared.Autoguard.Responses> => ({
	"GET:/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent(""));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"POST:/": async (request) => {
		let guard = shared.Autoguard.Requests["POST:/"];
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push(decodeURIComponent(""));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["POST:/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/one": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/one/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		components.push(decodeURIComponent(""));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/one/two": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/two"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		components.push(decodeURIComponent("two"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/two"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_plain_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_plain_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_plain_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_plain_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_plain_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_boolean_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_boolean_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_boolean_component"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_boolean_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_boolean_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_number_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_number_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_number_component"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_number_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_number_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_string_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_string_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_string_component"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_string_component"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_string_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<dynamic_component_one>/<dynamic_component_two>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_component_one>/<dynamic_component_two>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_component_one"]], true));
		components.push(...autoguard.api.serializeValues([request.options?.["dynamic_component_two"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["dynamic_component_one","dynamic_component_two"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_component_one>/<dynamic_component_two>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/<quoted key>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<quoted key>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(...autoguard.api.serializeValues([request.options?.["quoted key"]], true));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["quoted key"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<quoted key>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters01"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters01"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters02"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("required_boolean_parameter", [request.options?.["required_boolean_parameter"]], false));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters02"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters03"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("optional_boolean_parameter", [request.options?.["optional_boolean_parameter"]], false));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters03"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters04"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("required_number_parameter", [request.options?.["required_number_parameter"]], false));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters04"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters05"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("optional_number_parameter", [request.options?.["optional_number_parameter"]], false));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters05"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters06"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("required_string_parameter", [request.options?.["required_string_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters06"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters07"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("optional_string_parameter", [request.options?.["optional_string_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters07"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters08"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("parameter_one", [request.options?.["parameter_one"]], true));
		parameters.push(...autoguard.api.serializeKeyValues("parameter_two", [request.options?.["parameter_two"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters08"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters09"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters09"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("quoted key", [request.options?.["quoted key"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters09"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters10": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters10"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters10"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("required_parameter", [request.options?.["required_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters10"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters11": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters11"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters11"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("optional_parameter", [request.options?.["optional_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters11"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters12": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters12"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters12"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("required_plain_parameter", [request.options?.["required_plain_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters12"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/parameters13": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters13"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters13"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("optional_plain_parameter", [request.options?.["optional_plain_parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters13"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers01"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers01"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers02"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("required_boolean_request_header", [request.headers?.["required_boolean_request_header"]], false));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers02"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers03"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("optional_boolean_request_header", [request.headers?.["optional_boolean_request_header"]], false));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers03"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers04"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("required_number_request_header", [request.headers?.["required_number_request_header"]], false));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers04"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers05"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("optional_number_request_header", [request.headers?.["optional_number_request_header"]], false));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers05"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers06"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("required_string_request_header", [request.headers?.["required_string_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers06"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers07"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("optional_string_request_header", [request.headers?.["optional_string_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers07"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers08"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("request_header_one", [request.headers?.["request_header_one"]], true));
		headers.push(...autoguard.api.serializeKeyValues("request_header_two", [request.headers?.["request_header_two"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers08"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers09"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers09"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("quoted key", [request.headers?.["quoted key"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers09"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers10": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers10"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers10"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("required_request_header", [request.headers?.["required_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers10"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers11": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers11"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers11"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("optional_request_header", [request.headers?.["optional_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers11"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers12": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers12"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers12"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("required_plain_request_header", [request.headers?.["required_plain_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers12"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_headers13": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers13"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers13"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("optional_plain_request_header", [request.headers?.["optional_plain_request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers13"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers01"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers01"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers02"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_boolean_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_boolean_response_header", false);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers02"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers03"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_boolean_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_boolean_response_header", false);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers03"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers04"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_number_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_number_response_header", false);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers04"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers05"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_number_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_number_response_header", false);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers05"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers06"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_string_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_string_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers06"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers07"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_string_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_string_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers07"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers08"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["response_header_one"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header_one", true);
			headers["response_header_two"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header_two", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers08"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers09"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers09"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["quoted key"] = autoguard.api.decodeHeaderValue(raw.headers, "quoted key", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers09"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers10": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers10"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers10"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers10"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers11": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers11"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers11"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers11"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers12": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers12"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers12"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_plain_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "required_plain_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers12"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_headers13": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers13"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers13"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_plain_response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "optional_plain_response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers13"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_payload01"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload01"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/request_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_payload02"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload02"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_payload01"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload01"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/response_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_payload02"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload02"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/full_example": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/full_example"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("full_example"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("parameter", [request.options?.["parameter"]], true));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers.push(...autoguard.api.serializeKeyValues("request_header", [request.headers?.["request_header"]], true));
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["response_header"] = autoguard.api.decodeHeaderValue(raw.headers, "response_header", true);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/full_example"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/reference": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/reference"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("reference"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/reference"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/binary_request": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_request"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("binary_request"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = request.payload;
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/binary_request"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
	"GET:/binary_response": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_response"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("binary_response"));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...[], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = raw.payload;
			let guard = shared.Autoguard.Responses["GET:/binary_response"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, true);
		}
	},
	"GET:/number/<number>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/number/<number>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("number"));
		components.push(...autoguard.api.serializeValues([request.options?.["number"]], false));
		let parameters = new Array<[string, string]>();
		parameters.push(...autoguard.api.serializeKeyValues("number", [request.options?.["number"]], false));
		parameters.push(...autoguard.api.extractKeyValuePairs(request.options ?? {}, [...["number"], ...parameters.map((parameter) => parameter[0])]));
		let headers = new Array<[string, string]>();
		headers = autoguard.api.encodeHeaderValues(headers);
		headers.push(...autoguard.api.extractKeyValuePairs(request.headers ?? {}, headers.map((header) => header[0])));
		let payload = autoguard.api.serializePayload(request.payload);
		let requestHandler = options?.requestHandler ?? autoguard.api.xhr;
		let raw = await requestHandler({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/number/<number>"];
			let response = guard.as({ status, headers, payload }, "response");
			return new autoguard.api.ServerResponse(response, false);
		}
	},
});
