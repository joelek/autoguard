// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import * as shared from "./index";

export const Client = (options?: Partial<{ urlPrefix: string }>): shared.Autoguard.Routes => ({
	"GET:/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"POST:/": async (request) => {
		let guard = shared.Autoguard.Requests["POST:/"];
		guard.as(request, "request");
		let method = "POST";
		let components = new Array<string>();
		components.push("");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["POST:/"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/one": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/one/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		components.push("");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/one/two": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/two"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("one");
		components.push("two");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/two"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/<dynamic_boolean_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_boolean_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_boolean_component"]));
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_boolean_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/<dynamic_number_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_number_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_number_component"]));
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_number_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/<dynamic_string_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_string_component>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_string_component"]));
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_string_component>"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/<dynamic_component_one>/<dynamic_component_two>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_component_one>/<dynamic_component_two>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_component_one"]));
		components.push(String(request.options["dynamic_component_two"]));
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_component_one>/<dynamic_component_two>"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters01");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters01"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters02");
		let parameters = new Array<[string, string]>();
		if (request.options?.["required_boolean_parameter"] !== undefined) {
			parameters.push(["required_boolean_parameter", String(request.options?.["required_boolean_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters02"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters03");
		let parameters = new Array<[string, string]>();
		if (request.options?.["optional_boolean_parameter"] !== undefined) {
			parameters.push(["optional_boolean_parameter", String(request.options?.["optional_boolean_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters03"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters04");
		let parameters = new Array<[string, string]>();
		if (request.options?.["required_number_parameter"] !== undefined) {
			parameters.push(["required_number_parameter", String(request.options?.["required_number_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters04"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters05");
		let parameters = new Array<[string, string]>();
		if (request.options?.["optional_number_parameter"] !== undefined) {
			parameters.push(["optional_number_parameter", String(request.options?.["optional_number_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters05"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters06");
		let parameters = new Array<[string, string]>();
		if (request.options?.["required_string_parameter"] !== undefined) {
			parameters.push(["required_string_parameter", String(request.options?.["required_string_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters06"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters07");
		let parameters = new Array<[string, string]>();
		if (request.options?.["optional_string_parameter"] !== undefined) {
			parameters.push(["optional_string_parameter", String(request.options?.["optional_string_parameter"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters07"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/parameters08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("parameters08");
		let parameters = new Array<[string, string]>();
		if (request.options?.["parameter_one"] !== undefined) {
			parameters.push(["parameter_one", String(request.options?.["parameter_one"])]);
		}
		if (request.options?.["parameter_two"] !== undefined) {
			parameters.push(["parameter_two", String(request.options?.["parameter_two"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters08"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers01");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers01"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers02");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["required_boolean_request_header"] !== undefined) {
			headers.push(["required_boolean_request_header", String(request.headers?.["required_boolean_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers02"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers03");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["optional_boolean_request_header"] !== undefined) {
			headers.push(["optional_boolean_request_header", String(request.headers?.["optional_boolean_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers03"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers04");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["required_number_request_header"] !== undefined) {
			headers.push(["required_number_request_header", String(request.headers?.["required_number_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers04"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers05");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["optional_number_request_header"] !== undefined) {
			headers.push(["optional_number_request_header", String(request.headers?.["optional_number_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers05"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers06");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["required_string_request_header"] !== undefined) {
			headers.push(["required_string_request_header", String(request.headers?.["required_string_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers06"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers07");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["optional_string_request_header"] !== undefined) {
			headers.push(["optional_string_request_header", String(request.headers?.["optional_string_request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers07"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_headers08");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		if (request.headers?.["request_header_one"] !== undefined) {
			headers.push(["request_header_one", String(request.headers?.["request_header_one"])]);
		}
		if (request.headers?.["request_header_two"] !== undefined) {
			headers.push(["request_header_two", String(request.headers?.["request_header_two"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers08"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers01");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers01"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers02");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["required_boolean_response_header"] = autoguard.api.getBooleanOption(raw.headers, "required_boolean_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers02"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers03"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers03");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["optional_boolean_response_header"] = autoguard.api.getBooleanOption(raw.headers, "optional_boolean_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers03"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers04"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers04");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["required_number_response_header"] = autoguard.api.getNumberOption(raw.headers, "required_number_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers04"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers05"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers05");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["optional_number_response_header"] = autoguard.api.getNumberOption(raw.headers, "optional_number_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers05"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers06"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers06");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["required_string_response_header"] = autoguard.api.getStringOption(raw.headers, "required_string_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers06"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers07"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers07");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["optional_string_response_header"] = autoguard.api.getStringOption(raw.headers, "optional_string_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers07"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers08"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_headers08");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["response_header_one"] = autoguard.api.getStringOption(raw.headers, "response_header_one");
			headers["response_header_two"] = autoguard.api.getStringOption(raw.headers, "response_header_two");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers08"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_payload01");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload01"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/request_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("request_payload02");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload02"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload01"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_payload01");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload01"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/response_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload02"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("response_payload02");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload02"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/full_example": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/full_example"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("full_example");
		let parameters = new Array<[string, string]>();
		if (request.options?.["parameter"] !== undefined) {
			parameters.push(["parameter", String(request.options?.["parameter"])]);
		}
		let headers = new Array<[string, string]>();
		if (request.headers?.["request_header"] !== undefined) {
			headers.push(["request_header", String(request.headers?.["request_header"])]);
		}
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			headers["response_header"] = autoguard.api.getStringOption(raw.headers, "response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/full_example"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/reference": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/reference"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("reference");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/reference"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/binary_request": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_request"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("binary_request");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = request.payload;
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/binary_request"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/binary_response": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_response"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("binary_response");
		let parameters = new Array<[string, string]>();
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = raw.payload;
			let guard = shared.Autoguard.Responses["GET:/binary_response"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
	"GET:/number/<number>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/number/<number>"];
		guard.as(request, "request");
		let method = "GET";
		let components = new Array<string>();
		components.push("number");
		components.push(String(request.options["number"]));
		let parameters = new Array<[string, string]>();
		if (request.options?.["number"] !== undefined) {
			parameters.push(["number", String(request.options?.["number"])]);
		}
		let headers = new Array<[string, string]>();
		let payload = autoguard.api.serializePayload(request.payload);
		let url = (options?.urlPrefix ?? "");
		url += autoguard.api.serializeComponents(components);
		url += autoguard.api.serializeParameters(parameters);
		let raw = await autoguard.api.fetch(method, url, headers, payload);
		{
			let status = raw.status;
			let headers: Record<string, autoguard.api.Primitive | undefined> = {};
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/number/<number>"];
			let response = guard.as({ status, headers, payload }, "response");
			return response;
		}
	},
});
