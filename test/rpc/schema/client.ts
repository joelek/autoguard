// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import * as shared from "./index";

export const makeClient = (options?: Partial<{ urlPrefix: string }>): autoguard.api.Client<shared.Autoguard.Requests, shared.Autoguard.Responses> => ({
	"GET:/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"POST:/": async (request) => {
		let guard = shared.Autoguard.Requests["POST:/"];
		guard.as(request, "CLIENT:request");
		let method = "POST";
		let components = new Array<string>();
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["POST:/"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/one": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/one/": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		components.push(decodeURIComponent(""));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/one/two": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/one/two"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("one"));
		components.push(decodeURIComponent("two"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/one/two"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<dynamic_boolean_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_boolean_component>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_boolean_component"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["dynamic_boolean_component"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_boolean_component>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<dynamic_number_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_number_component>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_number_component"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["dynamic_number_component"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_number_component>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<dynamic_string_component>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_string_component>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_string_component"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["dynamic_string_component"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_string_component>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<dynamic_component_one>/<dynamic_component_two>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<dynamic_component_one>/<dynamic_component_two>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["dynamic_component_one"]));
		components.push(String(request.options["dynamic_component_two"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["dynamic_component_one","dynamic_component_two"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<dynamic_component_one>/<dynamic_component_two>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/<quoted key>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/<quoted key>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(String(request.options["quoted key"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["quoted key"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/<quoted key>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/%22r%C3%A4ksm%C3%B6rg%C3%A5s%22"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters01"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters01"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters01"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters02"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters02"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters02"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters03"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters03"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters03"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters04"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters04"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters04"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters05"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters05"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters05"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters06"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters06"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters06"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters07"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters07"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters07"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters08"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters08"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters08"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/parameters09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/parameters09"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("parameters09"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/parameters09"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers01"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers01"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers01"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers02"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers02"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers02"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers03"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers03"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers03"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers04"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers04"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers04"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers05"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers05"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers05"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers06"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers06"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers06"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers07"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers07"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers07"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers08"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers08"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers08"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_headers09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_headers09"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_headers09"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_headers09"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers01"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers01"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers01"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers02"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers02"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_boolean_response_header"] = autoguard.api.getBooleanOption(raw.headers, "required_boolean_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers02"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers03": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers03"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers03"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_boolean_response_header"] = autoguard.api.getBooleanOption(raw.headers, "optional_boolean_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers03"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers04": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers04"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers04"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_number_response_header"] = autoguard.api.getNumberOption(raw.headers, "required_number_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers04"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers05": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers05"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers05"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_number_response_header"] = autoguard.api.getNumberOption(raw.headers, "optional_number_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers05"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers06": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers06"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers06"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["required_string_response_header"] = autoguard.api.getStringOption(raw.headers, "required_string_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers06"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers07": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers07"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers07"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["optional_string_response_header"] = autoguard.api.getStringOption(raw.headers, "optional_string_response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers07"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers08": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers08"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers08"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["response_header_one"] = autoguard.api.getStringOption(raw.headers, "response_header_one");
			headers["response_header_two"] = autoguard.api.getStringOption(raw.headers, "response_header_two");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers08"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_headers09": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_headers09"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_headers09"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["quoted key"] = autoguard.api.getStringOption(raw.headers, "quoted key");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_headers09"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload01"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_payload01"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload01"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/request_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/request_payload02"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("request_payload02"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/request_payload02"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_payload01": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload01"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_payload01"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload01"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/response_payload02": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/response_payload02"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("response_payload02"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/response_payload02"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/full_example": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/full_example"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("full_example"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			headers["response_header"] = autoguard.api.getStringOption(raw.headers, "response_header");
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/full_example"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/reference": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/reference"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("reference"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/reference"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/binary_request": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_request"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("binary_request"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = request.payload;
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/binary_request"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/binary_response": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/binary_response"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("binary_response"));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, []);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = raw.payload;
			let guard = shared.Autoguard.Responses["GET:/binary_response"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
	"GET:/number/<number>": async (request) => {
		let guard = shared.Autoguard.Requests["GET:/number/<number>"];
		guard.as(request, "CLIENT:request");
		let method = "GET";
		let components = new Array<string>();
		components.push(decodeURIComponent("number"));
		components.push(String(request.options["number"]));
		let parameters = autoguard.api.extractKeyValuePairs(request.options ?? {}, ["number"]);
		let headers = autoguard.api.extractKeyValuePairs(request.headers ?? {});
		let payload = autoguard.api.serializePayload(request.payload);
		let raw = await autoguard.api.xhr({ method, components, parameters, headers, payload }, options?.urlPrefix);
		{
			let status = raw.status;
			let headers = autoguard.api.combineKeyValuePairs(raw.headers);
			let payload = await autoguard.api.deserializePayload(raw.payload);
			let guard = shared.Autoguard.Responses["GET:/number/<number>"];
			let response = guard.as({ status, headers, payload }, "CLIENT:response");
			return new autoguard.api.ServerResponse(response);
		}
	},
});
