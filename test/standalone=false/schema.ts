// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import { guards as autoguard } from "../../";

export type MyAnyType = any;

export const MyAnyType = autoguard.Any;

export type MyArrayOfStringType = string[];

export const MyArrayOfStringType = autoguard.Array.of(autoguard.String);

export type MyBooleanType = boolean;

export const MyBooleanType = autoguard.Boolean;

export type MyBooleanliteralType = true;

export const MyBooleanliteralType = autoguard.BooleanLiteral.of(true);

export type MyIntersectionType = ({
	"a_string_member": string
} & {
	"another_string_member": string
});

export const MyIntersectionType = autoguard.Intersection.of(
	autoguard.Object.of({
		"a_string_member": autoguard.String
	}),
	autoguard.Object.of({
		"another_string_member": autoguard.String
	})
);

export type MyNullType = null;

export const MyNullType = autoguard.Null;

export type MyNumberType = number;

export const MyNumberType = autoguard.Number;

export type MyNumberLiteralType = 1337;

export const MyNumberLiteralType = autoguard.NumberLiteral.of(1337);

export type MyObjectType = {
	"string_member": string,
	"optional_member"?: string,
	"member-with-dashes": string
};

export const MyObjectType = autoguard.Object.of({
	"string_member": autoguard.String,
	"optional_member": autoguard.Union.of(
		autoguard.Undefined,
		autoguard.String
	),
	"member-with-dashes": autoguard.String
});

export type MyRecordOfStringType = Record<string, undefined | string>;

export const MyRecordOfStringType = autoguard.Record.of(autoguard.String);

export type MyReferenceType = MyObjectType;

export const MyReferenceType = MyObjectType;

export type MyStringType = string;

export const MyStringType = autoguard.String;

export type MyStringLiteralType = "literal";

export const MyStringLiteralType = autoguard.StringLiteral.of("literal");

export type MyTupleType = [
	string,
	number
];

export const MyTupleType = autoguard.Tuple.of(
	autoguard.String,
	autoguard.Number
);

export type MyUndefinedType = undefined;

export const MyUndefinedType = autoguard.Undefined;

export type MyUnionType = (string | null);

export const MyUnionType = autoguard.Union.of(
	autoguard.String,
	autoguard.Null
);

export type Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyBooleanliteralType": MyBooleanliteralType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};

export const Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyBooleanliteralType": MyBooleanliteralType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};
