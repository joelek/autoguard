// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../";

const { Any, Array, Boolean, Null, Number, NumberLiteral, Object, Record, String, StringLiteral, Undefined } = { ...autoguard.guards };

export type MyAnyType = any;

export const MyAnyType = Any;

export type MyArrayOfStringType = string[];

export const MyArrayOfStringType = Array.of(String);

export type MyBooleanType = boolean;

export const MyBooleanType = Boolean;

export type MyIntersectionType = ({
	"a_string_member": string
} & {
	"another_string_member": string
});

export const MyIntersectionType = {
	as(subject: any, path: string = ""): ({
		"a_string_member": string
	} & {
		"another_string_member": string
	}) {
		(Object.of({
			"a_string_member": String
		})).as(subject, path);
		(Object.of({
			"another_string_member": String
		})).as(subject, path);
		return subject;
	},
	is(subject: any): subject is ({
		"a_string_member": string
	} & {
		"another_string_member": string
	}) {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyNullType = null;

export const MyNullType = Null;

export type MyNumberType = number;

export const MyNumberType = Number;

export type MyNumberLiteralType = 1337;

export const MyNumberLiteralType = NumberLiteral.of(1337);

export type MyObjectType = {
	"string_member": string,
	"optional_member"?: string,
	"member-with-dashes": string
};

export const MyObjectType = Object.of({
	"string_member": String,
	"optional_member": {
		as(subject: any, path: string = ""): (undefined | string) {
			try {
				return (Undefined).as(subject, path);
			} catch (error) {}
			try {
				return (String).as(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		},
		is(subject: any): subject is (undefined | string) {
			try {
				this.as(subject);
			} catch (error) {
				return false;
			}
			return true;
		}
	},
	"member-with-dashes": String
});

export type MyRecordOfStringType = Record<string, undefined | string>;

export const MyRecordOfStringType = Record.of(String);

export type MyReferenceType = MyObjectType;

export const MyReferenceType = MyObjectType;

export type MyStringType = string;

export const MyStringType = String;

export type MyStringLiteralType = "literal";

export const MyStringLiteralType = StringLiteral.of("literal");

export type MyTupleType = [
	string,
	number
];

export const MyTupleType = {
	as(subject: any, path: string = ""): [
		string,
		number
	] {
		if ((subject != null) && (subject.constructor === globalThis.Array)) {
			(String).as(subject[0], path + "[0]");
			(Number).as(subject[1], path + "[1]");
			return subject as [
				string,
				number
			];
		}
		throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
	},
	is(subject: any): subject is [
		string,
		number
	] {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyUndefinedType = undefined;

export const MyUndefinedType = Undefined;

export type MyUnionType = (string | null);

export const MyUnionType = {
	as(subject: any, path: string = ""): (string | null) {
		try {
			return (String).as(subject, path);
		} catch (error) {}
		try {
			return (Null).as(subject, path);
		} catch (error) {}
		throw "Type guard \"Union\" failed at \"" + path + "\"!";
	},
	is(subject: any): subject is (string | null) {
		try {
			this.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};

export const Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};
