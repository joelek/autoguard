// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard";

export type MyAnyType = any;

export const MyAnyType = {
	as(subject: any, path: string = ""): MyAnyType {
		return ((subject, path) => {
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is MyAnyType {
		try {
			MyAnyType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyArrayOfStringType = string[];

export const MyArrayOfStringType = {
	as(subject: any, path: string = ""): MyArrayOfStringType {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Array)) {
				for (let i = 0; i < subject.length; i++) {
					(autoguard.guards.String.as)(subject[i], path + "[" + i + "]");
				}
				return subject;
			}
			throw "Type guard \"Array\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyArrayOfStringType {
		try {
			MyArrayOfStringType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyBooleanType = boolean;

export const MyBooleanType = {
	as(subject: any, path: string = ""): MyBooleanType {
		return (autoguard.guards.Boolean.as)(subject, path);
	},
	is(subject: any): subject is MyBooleanType {
		try {
			MyBooleanType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyIntersectionType = ({
	"a_string_member": string
} & {
	"another_string_member": string
});

export const MyIntersectionType = {
	as(subject: any, path: string = ""): MyIntersectionType {
		return ((subject, path) => {
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					(autoguard.guards.String.as)(subject["a_string_member"], path + "[\"a_string_member\"]");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			((subject, path) => {
				if ((subject != null) && (subject.constructor === globalThis.Object)) {
					(autoguard.guards.String.as)(subject["another_string_member"], path + "[\"another_string_member\"]");
					return subject;
				}
				throw "Type guard \"Object\" failed at \"" + path + "\"!";
			})(subject, path);
			return subject;
		})(subject, path);
	},
	is(subject: any): subject is MyIntersectionType {
		try {
			MyIntersectionType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyNullType = null;

export const MyNullType = {
	as(subject: any, path: string = ""): MyNullType {
		return (autoguard.guards.Null.as)(subject, path);
	},
	is(subject: any): subject is MyNullType {
		try {
			MyNullType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyNumberType = number;

export const MyNumberType = {
	as(subject: any, path: string = ""): MyNumberType {
		return (autoguard.guards.Number.as)(subject, path);
	},
	is(subject: any): subject is MyNumberType {
		try {
			MyNumberType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyNumberLiteralType = 1337;

export const MyNumberLiteralType = {
	as(subject: any, path: string = ""): MyNumberLiteralType {
		return ((subject, path) => {
			if (subject === 1337) {
				return subject;
			}
			throw "Type guard \"NumberLiteral\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyNumberLiteralType {
		try {
			MyNumberLiteralType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyObjectType = {
	"string_member": string,
	"optional_member"?: string,
	"member-with-dashes": string
};

export const MyObjectType = {
	as(subject: any, path: string = ""): MyObjectType {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				(autoguard.guards.String.as)(subject["string_member"], path + "[\"string_member\"]");
				((subject, path) => {
					try {
						return (autoguard.guards.Undefined.as)(subject, path);
					} catch (error) {}
					try {
						return (autoguard.guards.String.as)(subject, path);
					} catch (error) {}
					throw "Type guard \"Union\" failed at \"" + path + "\"!";
				})(subject["optional_member"], path + "[\"optional_member\"]");
				(autoguard.guards.String.as)(subject["member-with-dashes"], path + "[\"member-with-dashes\"]");
				return subject;
			}
			throw "Type guard \"Object\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyObjectType {
		try {
			MyObjectType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyRecordOfStringType = { [key: string]: undefined | string };

export const MyRecordOfStringType = {
	as(subject: any, path: string = ""): MyRecordOfStringType {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Object)) {
				for (let key of globalThis.Object.keys(subject)) {
					(autoguard.guards.String.as)(subject[key], path + "[\"" + key + "\"]");
				}
				return subject;
			}
			throw "Type guard \"Record\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyRecordOfStringType {
		try {
			MyRecordOfStringType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyReferenceType = MyObjectType;

export const MyReferenceType = {
	as(subject: any, path: string = ""): MyReferenceType {
		return (MyObjectType.as)(subject, path);
	},
	is(subject: any): subject is MyReferenceType {
		try {
			MyReferenceType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyStringType = string;

export const MyStringType = {
	as(subject: any, path: string = ""): MyStringType {
		return (autoguard.guards.String.as)(subject, path);
	},
	is(subject: any): subject is MyStringType {
		try {
			MyStringType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyStringLiteralType = "literal";

export const MyStringLiteralType = {
	as(subject: any, path: string = ""): MyStringLiteralType {
		return ((subject, path) => {
			if (subject === "literal") {
				return subject;
			}
			throw "Type guard \"StringLiteral\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyStringLiteralType {
		try {
			MyStringLiteralType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyTupleType = [
	string,
	number
];

export const MyTupleType = {
	as(subject: any, path: string = ""): MyTupleType {
		return ((subject, path) => {
			if ((subject != null) && (subject.constructor === globalThis.Array)) {
				(autoguard.guards.String.as)(subject[0], path + "[0]");
				(autoguard.guards.Number.as)(subject[1], path + "[1]");
				return subject;
			}
			throw "Type guard \"Tuple\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyTupleType {
		try {
			MyTupleType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyUndefinedType = undefined;

export const MyUndefinedType = {
	as(subject: any, path: string = ""): MyUndefinedType {
		return (autoguard.guards.Undefined.as)(subject, path);
	},
	is(subject: any): subject is MyUndefinedType {
		try {
			MyUndefinedType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type MyUnionType = (string | null);

export const MyUnionType = {
	as(subject: any, path: string = ""): MyUnionType {
		return ((subject, path) => {
			try {
				return (autoguard.guards.String.as)(subject, path);
			} catch (error) {}
			try {
				return (autoguard.guards.Null.as)(subject, path);
			} catch (error) {}
			throw "Type guard \"Union\" failed at \"" + path + "\"!";
		})(subject, path);
	},
	is(subject: any): subject is MyUnionType {
		try {
			MyUnionType.as(subject);
		} catch (error) {
			return false;
		}
		return true;
	}
};

export type Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};

export const Autoguard = {
	"MyAnyType": MyAnyType,
	"MyArrayOfStringType": MyArrayOfStringType,
	"MyBooleanType": MyBooleanType,
	"MyIntersectionType": MyIntersectionType,
	"MyNullType": MyNullType,
	"MyNumberType": MyNumberType,
	"MyNumberLiteralType": MyNumberLiteralType,
	"MyObjectType": MyObjectType,
	"MyRecordOfStringType": MyRecordOfStringType,
	"MyReferenceType": MyReferenceType,
	"MyStringType": MyStringType,
	"MyStringLiteralType": MyStringLiteralType,
	"MyTupleType": MyTupleType,
	"MyUndefinedType": MyUndefinedType,
	"MyUnionType": MyUnionType
};
