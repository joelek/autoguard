// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../";

export type MyAnyType = any;

export const MyAnyType = autoguard.guards.Any;

export type MyArrayOfStringType = string[];

export const MyArrayOfStringType = autoguard.guards.Array.of(autoguard.guards.String);

export type MyBooleanType = boolean;

export const MyBooleanType = autoguard.guards.Boolean;

export type MyBooleanliteralType = true;

export const MyBooleanliteralType = autoguard.guards.BooleanLiteral.of(true);

export type MyGroupType = (any);

export const MyGroupType = autoguard.guards.Any;

export type MyIntersectionType = {
	"a_string_member": string
} & {
	"another_string_member": string
};

export const MyIntersectionType = autoguard.guards.Intersection.of(
	autoguard.guards.Object.of({
		"a_string_member": autoguard.guards.String
	}),
	autoguard.guards.Object.of({
		"another_string_member": autoguard.guards.String
	})
);

export type MyNullType = null;

export const MyNullType = autoguard.guards.Null;

export type MyNumberType = number;

export const MyNumberType = autoguard.guards.Number;

export type MyNumberLiteralType = 1337;

export const MyNumberLiteralType = autoguard.guards.NumberLiteral.of(1337);

export type MyObjectType = {
	"string_member": string,
	"optional_member"?: string,
	"quoted-member": string
};

export const MyObjectType = autoguard.guards.Object.of({
	"string_member": autoguard.guards.String,
	"optional_member": autoguard.guards.Union.of(
		autoguard.guards.Undefined,
		autoguard.guards.String
	),
	"quoted-member": autoguard.guards.String
});

export type MyRecordOfStringType = Record<string, undefined | string>;

export const MyRecordOfStringType = autoguard.guards.Record.of(autoguard.guards.String);

export type MyReferenceType = MyObjectType;

export const MyReferenceType = autoguard.guards.Reference.of(() => MyObjectType);

export type MyStringType = string;

export const MyStringType = autoguard.guards.String;

export type MyStringLiteralType = "räksmörgås";

export const MyStringLiteralType = autoguard.guards.StringLiteral.of("räksmörgås");

export type MyTupleType = [
	string,
	number
];

export const MyTupleType = autoguard.guards.Tuple.of(
	autoguard.guards.String,
	autoguard.guards.Number
);

export type MyUndefinedType = undefined;

export const MyUndefinedType = autoguard.guards.Undefined;

export type MyUnionType = string | null;

export const MyUnionType = autoguard.guards.Union.of(
	autoguard.guards.String,
	autoguard.guards.Null
);

export namespace Autoguard {
	export type Guards = {
		"MyAnyType": MyAnyType,
		"MyArrayOfStringType": MyArrayOfStringType,
		"MyBooleanType": MyBooleanType,
		"MyBooleanliteralType": MyBooleanliteralType,
		"MyGroupType": MyGroupType,
		"MyIntersectionType": MyIntersectionType,
		"MyNullType": MyNullType,
		"MyNumberType": MyNumberType,
		"MyNumberLiteralType": MyNumberLiteralType,
		"MyObjectType": MyObjectType,
		"MyRecordOfStringType": MyRecordOfStringType,
		"MyReferenceType": MyReferenceType,
		"MyStringType": MyStringType,
		"MyStringLiteralType": MyStringLiteralType,
		"MyTupleType": MyTupleType,
		"MyUndefinedType": MyUndefinedType,
		"MyUnionType": MyUnionType
	};

	export const Guards = {
		"MyAnyType": MyAnyType,
		"MyArrayOfStringType": MyArrayOfStringType,
		"MyBooleanType": MyBooleanType,
		"MyBooleanliteralType": MyBooleanliteralType,
		"MyGroupType": MyGroupType,
		"MyIntersectionType": MyIntersectionType,
		"MyNullType": MyNullType,
		"MyNumberType": MyNumberType,
		"MyNumberLiteralType": MyNumberLiteralType,
		"MyObjectType": MyObjectType,
		"MyRecordOfStringType": MyRecordOfStringType,
		"MyReferenceType": MyReferenceType,
		"MyStringType": MyStringType,
		"MyStringLiteralType": MyStringLiteralType,
		"MyTupleType": MyTupleType,
		"MyUndefinedType": MyUndefinedType,
		"MyUnionType": MyUnionType
	};

	export type Routes = {
	};

	export const Client = (options?: Partial<{ urlPrefix: string }>): Routes => ({
	});

	export const Server = (routes: Routes, options?: Partial<{}>): autoguard.api.RequestListener => {
		let endpoints = new Array<autoguard.api.Endpoint>();
		return (request, response) => autoguard.api.route(endpoints, request, response);
	};
};
