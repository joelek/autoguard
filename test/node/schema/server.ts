// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";
import * as shared from "./index";

export const makeServer = (routes: autoguard.api.Server<shared.Autoguard.Requests, shared.Autoguard.Responses>, options?: Partial<{ urlPrefix: string }>): autoguard.api.RequestListener => {
	let endpoints = new Array<autoguard.api.Endpoint>();
	endpoints.push((raw, auxillary) => {
		let method = "POST";
		let components = new Array<[string, string]>();
		components.push(["component", raw.components[0]]);
		components.push(["", decodeURIComponent("")]);
		return {
			acceptsComponents: () => autoguard.api.acceptsComponents(raw.components, components),
			acceptsMethod: () => autoguard.api.acceptsMethod(raw.method, method),
			validateRequest: async () => {
				let options = autoguard.api.combineKeyValuePairs(raw.parameters);
				options["component"] = autoguard.api.getValue(components, "component", true);
				options["parameter"] = autoguard.api.getValue(raw.parameters, "parameter", true);
				let headers = autoguard.api.combineKeyValuePairs(raw.headers);
				headers["header"] = autoguard.api.getValue(raw.headers, "header", true);
				let payload = await autoguard.api.deserializePayload(raw.payload);
				let guard = shared.Autoguard.Requests["POST:/<component>/"];
				let request = guard.as({ options, headers, payload }, "request");
				return {
					handleRequest: async () => {
						let response = await routes["POST:/<component>/"](new autoguard.api.ClientRequest(request, auxillary));
						return {
							validateResponse: async () => {
								let guard = shared.Autoguard.Responses["POST:/<component>/"];
								guard.as(response, "response");
								let status = response.status ?? 200;
								let headers = new Array<[string, string]>();
								autoguard.api.appendKeyValuePair(headers, "header", response.headers?.["header"], true);
								headers.push(...autoguard.api.extractKeyValuePairs(response.headers ?? {}, headers.map((header) => header[0])));
								let payload = autoguard.api.serializePayload(response.payload);
								return autoguard.api.finalizeResponse({ status, headers, payload }, "application/json; charset=utf-8");
							}
						};
					}
				};
			}
		};
	});
	return (request, response) => autoguard.api.route(endpoints, request, response, options?.urlPrefix);
};
