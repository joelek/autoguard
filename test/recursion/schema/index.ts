// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../";

export const array1 = autoguard.guards.Array.of(autoguard.guards.String);

export type array1 = ReturnType<typeof array1["as"]>;

export const array2 = autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.String));

export type array2 = ReturnType<typeof array2["as"]>;

export const array3 = autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.String)));

export type array3 = ReturnType<typeof array3["as"]>;

export const array4 = autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.String))));

export type array4 = ReturnType<typeof array4["as"]>;

export const array5 = autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.Array.of(autoguard.guards.String)))));

export type array5 = ReturnType<typeof array5["as"]>;

export const intersection1 = autoguard.guards.Object.of({});

export type intersection1 = ReturnType<typeof intersection1["as"]>;

export const intersection2 = autoguard.guards.Intersection.of(
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({})
);

export type intersection2 = ReturnType<typeof intersection2["as"]>;

export const intersection3 = autoguard.guards.Intersection.of(
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({})
);

export type intersection3 = ReturnType<typeof intersection3["as"]>;

export const intersection4 = autoguard.guards.Intersection.of(
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({})
);

export type intersection4 = ReturnType<typeof intersection4["as"]>;

export const intersection5 = autoguard.guards.Intersection.of(
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({}),
	autoguard.guards.Object.of({})
);

export type intersection5 = ReturnType<typeof intersection5["as"]>;

export const union1 = autoguard.guards.String;

export type union1 = ReturnType<typeof union1["as"]>;

export const union2 = autoguard.guards.String;

export type union2 = ReturnType<typeof union2["as"]>;

export const union3 = autoguard.guards.String;

export type union3 = ReturnType<typeof union3["as"]>;

export const union4 = autoguard.guards.String;

export type union4 = ReturnType<typeof union4["as"]>;

export const union5 = autoguard.guards.String;

export type union5 = ReturnType<typeof union5["as"]>;

export const preceedence1 = autoguard.guards.Union.of(
	autoguard.guards.Array.of(autoguard.guards.String),
	autoguard.guards.String
);

export type preceedence1 = ReturnType<typeof preceedence1["as"]>;

export const preceedence2 = autoguard.guards.Union.of(
	autoguard.guards.String,
	autoguard.guards.Array.of(autoguard.guards.String)
);

export type preceedence2 = ReturnType<typeof preceedence2["as"]>;

export const preceedence3 = autoguard.guards.Union.of(
	autoguard.guards.String,
	autoguard.guards.Intersection.of(
		autoguard.guards.Object.of({
			"a": autoguard.guards.String
		}),
		autoguard.guards.Object.of({
			"b": autoguard.guards.String
		})
	)
);

export type preceedence3 = ReturnType<typeof preceedence3["as"]>;

export const preceedence4 = autoguard.guards.Union.of(
	autoguard.guards.Intersection.of(
		autoguard.guards.Object.of({
			"a": autoguard.guards.String
		}),
		autoguard.guards.Object.of({
			"b": autoguard.guards.String
		})
	),
	autoguard.guards.String
);

export type preceedence4 = ReturnType<typeof preceedence4["as"]>;

export const empty1 = autoguard.guards.Tuple.of();

export type empty1 = ReturnType<typeof empty1["as"]>;

export const empty2 = autoguard.guards.Object.of({});

export type empty2 = ReturnType<typeof empty2["as"]>;

export const reference1 = autoguard.guards.Reference.of(() => reference2);

export type reference1 = ReturnType<typeof reference1["as"]>;

export const reference2 = autoguard.guards.Object.of({});

export type reference2 = ReturnType<typeof reference2["as"]>;

export namespace Autoguard {
	export const Guards = {
		"array1": autoguard.guards.Reference.of(() => array1),
		"array2": autoguard.guards.Reference.of(() => array2),
		"array3": autoguard.guards.Reference.of(() => array3),
		"array4": autoguard.guards.Reference.of(() => array4),
		"array5": autoguard.guards.Reference.of(() => array5),
		"intersection1": autoguard.guards.Reference.of(() => intersection1),
		"intersection2": autoguard.guards.Reference.of(() => intersection2),
		"intersection3": autoguard.guards.Reference.of(() => intersection3),
		"intersection4": autoguard.guards.Reference.of(() => intersection4),
		"intersection5": autoguard.guards.Reference.of(() => intersection5),
		"union1": autoguard.guards.Reference.of(() => union1),
		"union2": autoguard.guards.Reference.of(() => union2),
		"union3": autoguard.guards.Reference.of(() => union3),
		"union4": autoguard.guards.Reference.of(() => union4),
		"union5": autoguard.guards.Reference.of(() => union5),
		"preceedence1": autoguard.guards.Reference.of(() => preceedence1),
		"preceedence2": autoguard.guards.Reference.of(() => preceedence2),
		"preceedence3": autoguard.guards.Reference.of(() => preceedence3),
		"preceedence4": autoguard.guards.Reference.of(() => preceedence4),
		"empty1": autoguard.guards.Reference.of(() => empty1),
		"empty2": autoguard.guards.Reference.of(() => empty2),
		"reference1": autoguard.guards.Reference.of(() => reference1),
		"reference2": autoguard.guards.Reference.of(() => reference2)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
