// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "../../../dist/lib-shared";

export enum Table {
	"A" = 0,
	"B" = 1
};

export namespace Table {
	export const Key: autoguard.serialization.MessageGuard<Key> = autoguard.guards.Union.of(
		autoguard.guards.StringLiteral.of("A"),
		autoguard.guards.StringLiteral.of("B")
	);

	export type Key = autoguard.guards.Union<[
		autoguard.guards.StringLiteral<"A">,
		autoguard.guards.StringLiteral<"B">
	]>;

	export const Value: autoguard.serialization.MessageGuard<Value> = autoguard.guards.Union.of(
		autoguard.guards.NumberLiteral.of(0),
		autoguard.guards.NumberLiteral.of(1)
	);

	export type Value = autoguard.guards.Union<[
		autoguard.guards.NumberLiteral<0>,
		autoguard.guards.NumberLiteral<1>
	]>;

	export function keyFromValue(value: number): Key {
		return Key.as(Table[Value.as(value)]);
	};

	export function valueFromKey(key: string): Value {
		return Value.as(Table[Key.as(key)]);
	};
};

export const Guard: autoguard.serialization.MessageGuard<Guard> = autoguard.guards.Object.of({
	"key": autoguard.guards.Reference.of(() => Table.Key),
	"value": autoguard.guards.Reference.of(() => Table.Value)
}, {});

export type Guard = autoguard.guards.Object<{
	"key": autoguard.guards.Reference<Table.Key>,
	"value": autoguard.guards.Reference<Table.Value>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"Guard": autoguard.guards.Reference.of(() => Guard)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
